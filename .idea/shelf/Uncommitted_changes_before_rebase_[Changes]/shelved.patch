Index: src/main/java/com/example/proyecto2fpoe/Controller/GameController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.example.proyecto2fpoe.Controller;\r\n\r\nimport com.example.proyecto2fpoe.Model.Animation.*;\r\nimport com.example.proyecto2fpoe.Model.List.IList;\r\nimport com.example.proyecto2fpoe.Model.SudokuModel;\r\nimport com.example.proyecto2fpoe.View.GameStage;\r\nimport javafx.fxml.FXML;\r\nimport javafx.scene.Node;\r\nimport javafx.scene.control.*;\r\nimport javafx.scene.layout.GridPane;\r\nimport javafx.scene.text.Text;\r\n\r\nimport java.io.IOException;\r\nimport java.util.*;\r\n\r\npublic class GameController {\r\n    @FXML\r\n    private GridPane sudokuGrid;\r\n    @FXML\r\n    private Button helpButton;\r\n    @FXML\r\n    private Text winAdvice;\r\n    @FXML\r\n    private TextField attempts;\r\n    @FXML\r\n    private TextField correct;\r\n    @FXML\r\n    private TextField helpsLeft;\r\n\r\n    private SudokuModel model;\r\n    private int helpUses = 0;\r\n    private int remainingHelps = 6;\r\n    private int tries = 0;\r\n    private int correctEntries = 0;\r\n\r\n    @FXML\r\n    public void initialize() {\r\n        model = new SudokuModel();\r\n        model.generatePuzzle(0);\r\n        populateGrid();\r\n        printBoard(model.getBoard());\r\n        assignGridIndex();\r\n        assignListeners();\r\n        winAdvice.setLayoutX(15);\r\n        winAdvice.setLayoutY(200);\r\n        winAdvice.setOpacity(0);\r\n\r\n        attempts.setEditable(false);\r\n        correct.setEditable(false);\r\n        helpsLeft.setEditable(false);\r\n\r\n        correct.setText(String.valueOf(correctEntries));\r\n        attempts.setText(String.valueOf(tries));\r\n        helpsLeft.setText(String.valueOf(remainingHelps));\r\n\r\n    }\r\n\r\n    private void assignListeners() {\r\n        for (Node node : sudokuGrid.getChildren()) {\r\n            if (node instanceof TextField txt) {\r\n                txt.textProperty().addListener((observable, oldValue, newValue) -> {\r\n\r\n                    if (newValue.length() > 1) {\r\n                        txt.setText(oldValue);\r\n                    } else if (!newValue.isEmpty() && newValue.matches(\"^[1-6]$\")) {\r\n                        int row = GridPane.getRowIndex(txt);\r\n                        int col = GridPane.getColumnIndex(txt);\r\n\r\n\r\n                        Integer correctValue = model.getBoard().get(row).get(col);\r\n\r\n                        if (Integer.parseInt(newValue) == correctValue) {\r\n                            txt.setEditable(false);\r\n                            CorrectNumberAnimation correctNumberAnimation = new CorrectNumberAnimation(txt);\r\n                            correctNumberAnimation.start();\r\n                            correctEntries++;\r\n                            correct.setText(String.valueOf(correctEntries));\r\n\r\n                            if (model.isRowComplete(row, sudokuGrid)) {\r\n                                onRowComplete(GridPane.getRowIndex(txt));  // Trigger row animation\r\n                            }\r\n                            if (model.isColumnComplete(col, sudokuGrid)) {\r\n                                onColumnComplete(GridPane.getColumnIndex(txt));\r\n                            }\r\n                            if (model.isSubGridComplete(sudokuGrid, row, col)) {\r\n                                onSubGridComplete(row, col);\r\n                            }\r\n                            if (model.isBoardComplete(sudokuGrid)) {\r\n                                onBoardComplete();\r\n                                adviceAnimation();\r\n                                winAlert(\"Has ganado!\", \"Completaste el sudoku!.\");\r\n                            }\r\n                        } else {\r\n                            tries++;\r\n                            attempts.setText(String.valueOf(tries));\r\n                            txt.setStyle(\"-fx-border-color: red; -fx-border-width: 2px;\");\r\n                            showAlert(\"Error\", \"Número incorrecto\", \"El número que ingresaste es incorrecto. Inténtalo de nuevo.\");\r\n                            txt.clear();\r\n                        }\r\n                    } else if (newValue.isEmpty()) {\r\n                        txt.setStyle(\"\");\r\n                    }\r\n                });\r\n\r\n                txt.setTextFormatter(new TextFormatter<>(change -> {\r\n                    String newText = change.getText();\r\n\r\n                    if (newText.isEmpty() || newText.matches(\"^[1-6]$\")) {\r\n                        return change;\r\n                    }\r\n\r\n                    return null;\r\n                }));\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private void assignGridIndex() {\r\n        for (Node node : sudokuGrid.getChildren()) {\r\n            if (node instanceof TextField) {\r\n                Integer rowIndex = GridPane.getRowIndex(node);\r\n                Integer colIndex = GridPane.getColumnIndex(node);\r\n\r\n                if (rowIndex == null) rowIndex = 0;\r\n                if (colIndex == null) colIndex = 0;\r\n\r\n                GridPane.setRowIndex(node, rowIndex);\r\n                GridPane.setColumnIndex(node, colIndex);\r\n            }\r\n        }\r\n    }\r\n\r\n    //DELETE BEFORE FINAL VERSION. JUST FOR TESTING PURPOSES.\r\n    private static void printBoard(IList<IList<Integer>> board) {\r\n        for (int row = 0; row < board.size(); row++) {\r\n            for (int col = 0; col < board.get(row).size(); col++) {\r\n                int value = board.get(row).get(col);\r\n                System.out.print((value == 0 ? \".\" : value) + \" \");\r\n                if ((col + 1) % 3 == 0 && col != 5) {\r\n                    System.out.print(\"| \");\r\n                }\r\n            }\r\n            System.out.println();\r\n            if ((row + 1) % 2 == 0 && row != 5) {\r\n                System.out.println(\"------+-------\");\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n\r\n    public void populateGrid() {\r\n        IList<IList<Integer>> board = model.getBoard();\r\n\r\n        final int NUMBERS_PER_BLOCK = 2;\r\n\r\n        for (int blockRow = 0; blockRow < 3; blockRow++) {\r\n            for (int blockCol = 0; blockCol < 2; blockCol++) {\r\n                List<Integer> positions = new ArrayList<>();\r\n                int SIZE = 6;\r\n                for (int row = 0; row < 2; row++) {\r\n                    for (int col = 0; col < 3; col++) {\r\n                        positions.add((blockRow * 2 + row) * SIZE + (blockCol * 3 + col));\r\n                    }\r\n                }\r\n\r\n                Collections.shuffle(positions);\r\n\r\n                List<Integer> cellsToShow = positions.subList(0, NUMBERS_PER_BLOCK);\r\n\r\n                for (int row = 0; row < 2; row++) {\r\n                    for (int col = 0; col < 3; col++) {\r\n                        int currentRow = blockRow * 2 + row;\r\n                        int currentCol = blockCol * 3 + col;\r\n\r\n                        TextField textField = (TextField) getNodeFromGridPane(sudokuGrid, currentRow, currentCol);\r\n                        Integer value = board.get(currentRow).get(currentCol);\r\n\r\n                        int positionIndex = currentRow * SIZE + currentCol;\r\n\r\n                        if (cellsToShow.contains(positionIndex)) {\r\n                            assert textField != null;\r\n                            textField.setText(value.toString());\r\n                            textField.setEditable(false);\r\n                        } else {\r\n                            assert textField != null;\r\n                            textField.setText(\"\");\r\n                            textField.setEditable(true);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    private Node getNodeFromGridPane(GridPane gridPane, int row, int col) {\r\n        for (Node node : gridPane.getChildren()) {\r\n            Integer nodeRow = GridPane.getRowIndex(node);\r\n            Integer nodeCol = GridPane.getColumnIndex(node);\r\n            if (nodeRow == null) nodeRow = 0;\r\n            if (nodeCol == null) nodeCol = 0;\r\n\r\n            if (nodeRow == row && nodeCol == col) {\r\n                return node;\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    @FXML\r\n    public void handleHelp() {\r\n        final int  MAX_HELP_USES = 6;\r\n        if (helpUses >= MAX_HELP_USES) {\r\n            showAlert(\"Límite de ayudas\", \"Has alcanzado el máximo de ayudas.\", \"Ya no puedes usar más ayudas.\");\r\n            helpButton.setDisable(true);\r\n            return;\r\n        }\r\n\r\n        List<TextField> emptyCells = new ArrayList<>();\r\n        IList<IList<Integer>> board = model.getBoard();\r\n\r\n        for (Node node : sudokuGrid.getChildren()) {\r\n            if (node instanceof TextField textField) {\r\n                if (textField.getText().isEmpty() && textField.isEditable() && textField.getPromptText().isEmpty()) {\r\n                    emptyCells.add(textField);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!emptyCells.isEmpty()) {\r\n            Random random = new Random();\r\n            TextField selectedCell = emptyCells.get(random.nextInt(emptyCells.size()));\r\n\r\n            int row = GridPane.getRowIndex(selectedCell);\r\n            int col = GridPane.getColumnIndex(selectedCell);\r\n\r\n            Integer recommendedValue = board.get(row).get(col);\r\n\r\n            selectedCell.setPromptText(String.valueOf(recommendedValue));\r\n\r\n            helpUses++;\r\n            remainingHelps --;\r\n            helpsLeft.setText(String.valueOf(remainingHelps));\r\n\r\n            if (helpUses >= MAX_HELP_USES) {\r\n                showAlert(\"Límite de ayudas\", \"Has alcanzado el máximo de ayudas.\", \"Ya no puedes usar más ayudas .\");\r\n                helpButton.setDisable(true);\r\n            }\r\n        }\r\n    }\r\n\r\n    public void showAlert(String title, String header, String content) {\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        alert.setTitle(title);\r\n        alert.setHeaderText(header);\r\n        alert.setContentText(content);\r\n        alert.showAndWait();\r\n    }\r\n\r\n    private void onRowComplete(int rowIndex) {\r\n        RowAnimation rowAnimation = new RowAnimation(sudokuGrid, rowIndex);\r\n        rowAnimation.start();\r\n    }\r\n\r\n    private void onColumnComplete(Integer columnIndex) {\r\n        ColumnAnimation columnAnimation = new ColumnAnimation(sudokuGrid, columnIndex);\r\n        columnAnimation.start();\r\n    }\r\n\r\n    private void onSubGridComplete(Integer rowIndex, Integer columnIndex) {\r\n        SubGridAnimation subGridAnimation = new SubGridAnimation(sudokuGrid, rowIndex, columnIndex);\r\n        subGridAnimation.start();\r\n    }\r\n\r\n    private void onBoardComplete() {\r\n        BoardAnimation boardAnimation = new BoardAnimation(sudokuGrid);\r\n        boardAnimation.start();\r\n    }\r\n\r\n    private void adviceAnimation(){\r\n        AdviceAnimation adviceAnimation = new AdviceAnimation();\r\n        adviceAnimation.start(winAdvice);\r\n    }\r\n\r\n    public void winAlert(String title, String headerText) {\r\n        Alert alert = new Alert(Alert.AlertType.INFORMATION);\r\n        alert.setTitle(title);\r\n        alert.setHeaderText(headerText);\r\n        alert.setContentText(\"¿Quieres volver a jugar?\");\r\n\r\n        ButtonType replayButton = new ButtonType(\"Volver a jugar\");\r\n        ButtonType cancelButton = new ButtonType(\"Salir\", ButtonBar.ButtonData.CANCEL_CLOSE);\r\n        alert.getButtonTypes().setAll(replayButton, cancelButton);\r\n\r\n        alert.showAndWait().ifPresent(response -> {\r\n            if (response == replayButton) {\r\n                try {\r\n                    resetGame();\r\n                } catch (IOException e) {\r\n                    throw new RuntimeException(e);\r\n                }\r\n            } else {\r\n                GameStage.deleteInstance();\r\n            }\r\n        });\r\n    }\r\n\r\n    private void resetGame() throws IOException {\r\n        GameStage.deleteInstance();\r\n        GameStage.getInstance();\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/example/proyecto2fpoe/Controller/GameController.java b/src/main/java/com/example/proyecto2fpoe/Controller/GameController.java
--- a/src/main/java/com/example/proyecto2fpoe/Controller/GameController.java	(revision 608e4a9900cf92b0a7d3efd6ecef821f6f39ec34)
+++ b/src/main/java/com/example/proyecto2fpoe/Controller/GameController.java	(date 1729648801718)
@@ -115,7 +115,6 @@
         }
     }
 
-
     private void assignGridIndex() {
         for (Node node : sudokuGrid.getChildren()) {
             if (node instanceof TextField) {
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"c2168273-e7ab-4ee1-94b7-bf341c86047c\" name=\"Changes\" comment=\"&quot;Agregadas las estructuras de datos List y LinkedList. Ademas se incorpora el modelo del Sudoku, SudokuModel&quot;\">\r\n      <change afterPath=\"$PROJECT_DIR$/src/main/java/com/example/proyecto2fpoe/Model/Animation/AdviceAnimation.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/proyecto2fpoe/Controller/GameController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/proyecto2fpoe/Controller/GameController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/java/com/example/proyecto2fpoe/View/GameStage.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/java/com/example/proyecto2fpoe/View/GameStage.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/com/example/proyecto2fpoe/game-view.fxml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/com/example/proyecto2fpoe/game-view.fxml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/main/resources/com/example/proyecto2fpoe/images/example.png\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/main/resources/com/example/proyecto2fpoe/images/example.png\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Interface\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"afpc\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;ManuelR12&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/ManuelR12/Sudoku---FPOE.git&quot;,\r\n    &quot;accountId&quot;: &quot;cc3a72b8-bcc1-4ed8-804e-ace893a51935&quot;\r\n  }\r\n}</component>\r\n  <component name=\"MavenImportPreferences\">\r\n    <option name=\"generalSettings\">\r\n      <MavenGeneralSettings>\r\n        <option name=\"mavenHomeTypeForPersistence\" value=\"WRAPPER\" />\r\n      </MavenGeneralSettings>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 2\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2nGIntDpWEmowJV22EHxjA8iSqR\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.Main.executor\": \"Run\",\r\n    \"Application.SudokuTest.executor\": \"Run\",\r\n    \"Application.Test.executor\": \"Run\",\r\n    \"Downloaded.Files.Path.Enabled\": \"false\",\r\n    \"Repository.Attach.Annotations\": \"false\",\r\n    \"Repository.Attach.JavaDocs\": \"false\",\r\n    \"Repository.Attach.Sources\": \"false\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"git-widget-placeholder\": \"feature-game-end-JMRO\",\r\n    \"kotlin-language-version-configured\": \"true\",\r\n    \"last_opened_file_path\": \"C:/Users/juanr/OneDrive/Escritorio/Universidad/2341245_Juan Manuel Rodriguez_miniproyecto1\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"project.structure.last.edited\": \"Libraries\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.42387542\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  }\r\n}]]></component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-b114ca120d71-intellij.indexing.shared.core-IU-242.20224.387\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-410509235cf1-JavaScript-IU-242.20224.387\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"c2168273-e7ab-4ee1-94b7-bf341c86047c\" name=\"Changes\" comment=\"\" />\r\n      <created>1728593158026</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1728593158026</updated>\r\n      <workItem from=\"1728593159072\" duration=\"1069000\" />\r\n      <workItem from=\"1729026906184\" duration=\"734000\" />\r\n      <workItem from=\"1729176343286\" duration=\"559000\" />\r\n      <workItem from=\"1729181118019\" duration=\"105000\" />\r\n      <workItem from=\"1729181240445\" duration=\"227000\" />\r\n      <workItem from=\"1729208221096\" duration=\"5966000\" />\r\n      <workItem from=\"1729298816301\" duration=\"3145000\" />\r\n      <workItem from=\"1729315211228\" duration=\"885000\" />\r\n      <workItem from=\"1729349779993\" duration=\"5260000\" />\r\n      <workItem from=\"1729355390683\" duration=\"3912000\" />\r\n      <workItem from=\"1729488308982\" duration=\"173000\" />\r\n      <workItem from=\"1729641809427\" duration=\"4934000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"&quot;Agregadas las estructuras de datos List y LinkedList. Ademas se incorpora el modelo del Sudoku, SudokuModel&quot;\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729226302783</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729226302783</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"&quot;Agregadas las estructuras de datos List y LinkedList. Ademas se incorpora el modelo del Sudoku, SudokuModel&quot;\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729226540479</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729226540479</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"&quot;Agregadas las estructuras de datos List y LinkedList. Ademas se incorpora el modelo del Sudoku, SudokuModel&quot;\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1729226544218</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1729226544218</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"4\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"afpc\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"&quot;Agregadas las estructuras de datos List y LinkedList. Ademas se incorpora el modelo del Sudoku, SudokuModel&quot;\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"&quot;Agregadas las estructuras de datos List y LinkedList. Ademas se incorpora el modelo del Sudoku, SudokuModel&quot;\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision 608e4a9900cf92b0a7d3efd6ecef821f6f39ec34)
+++ b/.idea/workspace.xml	(date 1729648715818)
@@ -4,14 +4,7 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="c2168273-e7ab-4ee1-94b7-bf341c86047c" name="Changes" comment="&quot;Agregadas las estructuras de datos List y LinkedList. Ademas se incorpora el modelo del Sudoku, SudokuModel&quot;">
-      <change afterPath="$PROJECT_DIR$/src/main/java/com/example/proyecto2fpoe/Model/Animation/AdviceAnimation.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/proyecto2fpoe/Controller/GameController.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/proyecto2fpoe/Controller/GameController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/java/com/example/proyecto2fpoe/View/GameStage.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/java/com/example/proyecto2fpoe/View/GameStage.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/com/example/proyecto2fpoe/game-view.fxml" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/com/example/proyecto2fpoe/game-view.fxml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/main/resources/com/example/proyecto2fpoe/images/example.png" beforeDir="false" afterPath="$PROJECT_DIR$/src/main/resources/com/example/proyecto2fpoe/images/example.png" afterDir="false" />
-    </list>
+    <list default="true" id="c2168273-e7ab-4ee1-94b7-bf341c86047c" name="Changes" comment="&quot;Agregadas las estructuras de datos List y LinkedList. Ademas se incorpora el modelo del Sudoku, SudokuModel&quot;" />
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
     <option name="HIGHLIGHT_NON_ACTIVE_CHANGELIST" value="false" />
@@ -28,7 +21,7 @@
   <component name="Git.Settings">
     <option name="RECENT_BRANCH_BY_REPOSITORY">
       <map>
-        <entry key="$PROJECT_DIR$" value="afpc" />
+        <entry key="$PROJECT_DIR$" value="feature-game-end-JMRO" />
       </map>
     </option>
     <option name="RECENT_GIT_ROOT_PATH" value="$PROJECT_DIR$" />
@@ -77,7 +70,7 @@
     "Repository.Attach.Sources": "false",
     "RunOnceActivity.ShowReadmeOnStart": "true",
     "SHARE_PROJECT_CONFIGURATION_FILES": "true",
-    "git-widget-placeholder": "feature-game-end-JMRO",
+    "git-widget-placeholder": "develop",
     "kotlin-language-version-configured": "true",
     "last_opened_file_path": "C:/Users/juanr/OneDrive/Escritorio/Universidad/2341245_Juan Manuel Rodriguez_miniproyecto1",
     "node.js.detected.package.eslint": "true",
